name: fb_clone_db


on:
  pull_request:
    branches:
    - '*'
    - '!master'
    - '!dev'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
# Clean the repository for next runs
  cleanup:
    runs-on: [self-hosted,local-ubuntu]
    container:
      image: ubuntu:latest
    steps:
      - name: Cleaning up the $GITHUB_WORKSPACE as root from a Docker image
        # Volume auto mounted by gh actions pointing to the current working-directory
        run: find /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/. -name . -o -prune -exec rm -rf -- {} + || true


# Build Image and do dbt commands
  clone_db:
    runs-on: [self-hosted,local-ubuntu] # Use ubuntu latests as container is just supported in linux.
    container: 
      image: juliansanjuan/dbt-nn
      credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      env: 
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA}}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WH: ${{ secrets.SNOWFLAKE_WH }}
          SNOWFLAKE_DB: ${{ secrets.SNOWFLAKE_DB }}         

    # Clone DB
    steps:
      - name: dbt debug
        uses: docker://juliansanjuan/dbt-nn
        with:
          volumes: /__w/dbt-dh-nn/dbt-dh-nn/dbt-dh-nn/dbt_project:dbt_project
      - run: |
            cd $GITHUB_WORKSPACE/dbt_project
            echo after a pull request from dev this workflow will trigger for clonning.   